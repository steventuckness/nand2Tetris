// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=aluOut, sel=instruction[15], out=toAIn);
    
    //Nand(a=instruction[15], b=false, out=isAInstruction);
    And(a=instruction[15], b=true, out=isCinstruction);
    Not(in=isCinstruction, out=notCInstruction);
    Or(a=instruction[5], b=notCInstruction, out=loadRegisterA);
    ARegister(in=toAIn, load=loadRegisterA, out=aOut, out[0..14]=addressM);
    
    // when a=0 comp mnemonic
    Mux16(a=aOut, b=inM, sel=instruction[12], out=amOut); 
 
    And(a=instruction[3], b=instruction[15], out=writeM); // if d3==m && isCinstruction, then writeM=1, else 0
     
    And(a=instruction[15], b=instruction[4], out=loadDRegister);
    DRegister(in=aluOut, load=loadDRegister, out=dOut);

    ALU(x=dOut, y=amOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zrOut, ng=ngOut);
    
    Not(in=instruction[0], out=notJ3);
    Not(in=instruction[1], out=notJ2);
    Not(in=instruction[2], out=notJ1);
    
    Not(in=zrOut, out=notZr);
    Not(in=ngOut, out=notNg);

    // JGT
    And(a=notZr, b=notNg, out=notZrAndNotng);
    Nand(a=instruction[1], b=instruction[2], out=notJ1AndJ2);
    And(a=notZrAndNotng, b=notJ1AndJ2, out=maybeJGT);
    And(a=instruction[0], b=maybeJGT, out=jgt);
    
    // JEQ
    And(a=notJ3, b=notJ1, out=notJ3AndNotJ1);
    And(a=zrOut, b=notNg, out=zrAndNotNg);
    And(a=notJ3AndNotJ1, b=zrAndNotNg, out=notJ3AndNotJ1AndzrAndNotNg);
    And(a=instruction[1], b=notJ3AndNotJ1AndzrAndNotNg, out=jeq);

    // JGE
    And(a=instruction[0], b=instruction[1], out=j2AndJ3);
    And(a=zrOut, b=notNg, out=zrOrNotNeg);
    And(a=zrOrNotNeg, b=j2AndJ3, out=maybeJge);
    And(a=maybeJge, b=notJ1, out=jge);

    // JLT
    And(a=notJ3, b=notJ2, out=notJ3AndNotJ2);
    And(a=instruction[2], b=notJ3AndNotJ2, out=j1AndNotJ3AndNotJ2);
    And(a=j1AndNotJ3AndNotJ2, b=ngOut, out=jlt);
    
    // JNE
    And(a=instruction[2], b=instruction[0], out=jmp1AndJmp3);
    And(a=jmp1AndJmp3, b=notJ2, out=maybeJne);
    And(a=maybeJne, b=notZr, out=jne);

    // JLE
    And(a=instruction[2], b=instruction[1], out=jmp1AndJmp2);
    Or(a=zrOut, b=ngOut, out=zeroOrNegative);
    And(a=jmp1AndJmp2, b=zeroOrNegative, out=jle);

    // JMP
    And(a=jmp1AndJmp2, b=instruction[0], out=jmp);
    
    Or(a=jgt, b=jeq, out=jgtOrJeq);
    Or(a=jge, b=jlt, out=jgeOrJlt);
    Or(a=jgtOrJeq, b=jgeOrJlt, out=jgtOrJeqOrjgeOrJlt);

    Or(a=jne, b=jle, out=jneOrjle);
    Or(a=jneOrjle, b=jmp, out=jneOrjleOrJmp);
    
    Or(a=jgtOrJeqOrjgeOrJlt, b=jneOrjleOrJmp, out=isAnyKindOfJmp);
    And(a=isAnyKindOfJmp, b=instruction[15], out=needsLoad);

    Not(in=needsLoad, out=needsInc);
    PC(in=aOut, load=needsLoad, inc=needsInc, reset=reset, out[0..14]=pc);
}